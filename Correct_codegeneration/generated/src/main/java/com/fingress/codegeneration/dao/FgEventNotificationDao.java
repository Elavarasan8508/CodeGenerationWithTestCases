package com.bsit.codegeneration.dao;

import org.jdbi.v3.sqlobject.statement.SqlQuery;
import org.jdbi.v3.sqlobject.statement.SqlUpdate;
import org.jdbi.v3.sqlobject.statement.GetGeneratedKeys;
import org.jdbi.v3.sqlobject.customizer.Bind;
import org.jdbi.v3.sqlobject.customizer.BindBean;
import org.jdbi.v3.sqlobject.config.RegisterRowMapper;
import com.bsit.codegeneration.record.FgEventNotification;
import com.bsit.codegeneration.mapper.FgEventNotificationMapper;
import java.util.*;

@RegisterRowMapper(FgEventNotificationMapper.class)
public interface FgEventNotificationDao {

    @SqlQuery("SELECT * FROM FG_EVENT_NOTIFICATION")
    public List<FgEventNotification> findAll();

    @SqlQuery("SELECT * FROM FG_EVENT_NOTIFICATION WHERE id = :id")
    public Optional<FgEventNotification> findById(@Bind("id") String id);

    @SqlUpdate("INSERT INTO FG_EVENT_NOTIFICATION(ID, REFERENCE_ID, TYPE_CODE, SUB_TYPE_CODE, ACTIVE_CODE, STAGE_CODE, STATUS_CODE, CREATED_ON, CREATED_BY, LAST_UPDATED_ON, LAST_UPDATED_BY, LAST_AUTHORISED_ON, LAST_AUTHORISED_BY, TEMPLATE, IS_TEMPLATE, ENTITY_REF_ID, ENTITY_VERSION_ID, ENTITY_TYPE_CODE, ENTITY_SUB_TYPE_CODE, EVENT_TYPE, EVENT_STATUS, CHANNEL, NOTIFICATION_PURPOSE, STAGES, EVENT_TEMPLATE_ID, RECIPIENT_MOBILE_NUMBER, RECIPIENT_EMAIL_ADDRESS, SENDERS_EMAIL_ADDRESS, SUBJECT, CONTENT, ATTACHMENTS) VALUES (:ID, :REFERENCE_ID, :TYPE_CODE, :SUB_TYPE_CODE, :ACTIVE_CODE, :STAGE_CODE, :STATUS_CODE, :CREATED_ON, :CREATED_BY, :LAST_UPDATED_ON, :LAST_UPDATED_BY, :LAST_AUTHORISED_ON, :LAST_AUTHORISED_BY, :TEMPLATE, :IS_TEMPLATE, :ENTITY_REF_ID, :ENTITY_VERSION_ID, :ENTITY_TYPE_CODE, :ENTITY_SUB_TYPE_CODE, :EVENT_TYPE, :EVENT_STATUS, :CHANNEL, :NOTIFICATION_PURPOSE, :STAGES, :EVENT_TEMPLATE_ID, :RECIPIENT_MOBILE_NUMBER, :RECIPIENT_EMAIL_ADDRESS, :SENDERS_EMAIL_ADDRESS, :SUBJECT, :CONTENT, :ATTACHMENTS)")
    @GetGeneratedKeys()
    public String insert(@BindBean() FgEventNotification entity);

    @SqlQuery("UPDATE FG_EVENT_NOTIFICATION SET ID = :ID, REFERENCE_ID = :REFERENCE_ID, TYPE_CODE = :TYPE_CODE, SUB_TYPE_CODE = :SUB_TYPE_CODE, ACTIVE_CODE = :ACTIVE_CODE, STAGE_CODE = :STAGE_CODE, STATUS_CODE = :STATUS_CODE, CREATED_ON = :CREATED_ON, CREATED_BY = :CREATED_BY, LAST_UPDATED_ON = :LAST_UPDATED_ON, LAST_UPDATED_BY = :LAST_UPDATED_BY, LAST_AUTHORISED_ON = :LAST_AUTHORISED_ON, LAST_AUTHORISED_BY = :LAST_AUTHORISED_BY, TEMPLATE = :TEMPLATE, IS_TEMPLATE = :IS_TEMPLATE, ENTITY_REF_ID = :ENTITY_REF_ID, ENTITY_VERSION_ID = :ENTITY_VERSION_ID, ENTITY_TYPE_CODE = :ENTITY_TYPE_CODE, ENTITY_SUB_TYPE_CODE = :ENTITY_SUB_TYPE_CODE, EVENT_TYPE = :EVENT_TYPE, EVENT_STATUS = :EVENT_STATUS, CHANNEL = :CHANNEL, NOTIFICATION_PURPOSE = :NOTIFICATION_PURPOSE, STAGES = :STAGES, EVENT_TEMPLATE_ID = :EVENT_TEMPLATE_ID, RECIPIENT_MOBILE_NUMBER = :RECIPIENT_MOBILE_NUMBER, RECIPIENT_EMAIL_ADDRESS = :RECIPIENT_EMAIL_ADDRESS, SENDERS_EMAIL_ADDRESS = :SENDERS_EMAIL_ADDRESS, SUBJECT = :SUBJECT, CONTENT = :CONTENT, ATTACHMENTS = :ATTACHMENTS WHERE id = :id")
    public int update(@BindBean() FgEventNotification entity);

    @SqlQuery("DELETE FROM FG_EVENT_NOTIFICATION WHERE id = :id")
    public int delete(@Bind("id") String id);
}
